from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from core.openai_client import OpenAIClient
from core.config import USD_TO_RUB
from utils.logger import logger

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
router = Router()
openai_client = OpenAIClient()

@router.message(Command("model"))
async def model_command_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /model"""
    markup = create_model_keyboard()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    current_model = openai_client.get_user_model(user_id)
    
    await message.answer(
        f"ü§ñ –í—ã–±–µ—Ä–∏ –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—â–µ–Ω–∏—è:\n\n"
        f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: <b>{current_model['name']}</b>\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤:\n"
        f"- –í–≤–æ–¥: ${current_model['input_price']:.2f}\n"
        f"- –í—ã–≤–æ–¥: ${current_model['output_price']:.2f}",
        reply_markup=markup
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")

def create_model_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏"""
    models = openai_client.get_available_models()
    keyboard = []
    
    for key, model in models.items():
        button_text = f"{model['name']} (${model['input_price']/1000:.2f}/${model['output_price']/1000:.2f} –∑–∞ 1K)"
        keyboard.append([InlineKeyboardButton(text=button_text, callback_data=f"model:{key}")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.callback_query(F.data.startswith("model:"))
async def model_callback_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    user_id = callback.from_user.id
    model_key = callback.data.split(":")[1]
    
    if openai_client.set_user_model(user_id, model_key):
        model_info = openai_client.get_user_model(user_id)
        await callback.message.edit_text(
            f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{model_info['name']}</b>\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–∞ 1000 —Ç–æ–∫–µ–Ω–æ–≤:\n"
            f"- –í–≤–æ–¥: ${model_info['input_price']/1000:.4f} (‚ÇΩ{model_info['input_price']*USD_TO_RUB/1000:.2f})"
            f"- –í—ã–≤–æ–¥: ${model_info['output_price']/1000:.4f} (‚ÇΩ{model_info['output_price']*USD_TO_RUB/1000:.2f})"
        )
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –º–æ–¥–µ–ª–∏
        openai_client.reset_conversation(user_id)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–∑–º–µ–Ω–∏–ª –º–æ–¥–µ–ª—å –Ω–∞ {model_key}")
    else:
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–¥–µ–ª–∏ {model_key} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    await callback.answer()