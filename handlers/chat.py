import asyncio
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from core.openai_client import OpenAIClient
from utils.logger import logger

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
router = Router()
openai_client = OpenAIClient()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM (–º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π)
class SystemPromptStates(StatesGroup):
    waiting_for_prompt = State()

@router.message(Command("start"))
async def start_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_name = message.from_user.first_name
    await message.answer(
        f"–ô–æ—É, {user_name}! ü§ñ\n\n"
        "–Ø —Ç–≤–æ–π –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π GPT-4.1-nano. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
        "–∏ —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –≤ –Ω–µ–π—Ä–æ–Ω–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!\n\n"
        "–ß—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π /reset"
        "–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π /system\n"
        "–î–ª—è —Å–±—Ä–æ—Å–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π /reset_system"
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

@router.message(Command("reset"))
async def reset_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–±—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)"""
    user_id = message.from_user.id
    openai_client.reset_conversation(user_id)
    await message.answer("–ò—Å—Ç–æ—Ä–∏—è —Å–±—Ä–æ—à–µ–Ω–∞! –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞ üß†")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–±—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é")

@router.message(Command("system"))
async def system_prompt_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /system –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    await message.answer(
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è OpenAI.\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Python, –∫–æ—Ç–æ—Ä—ã–π –≤—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ–¥–æ–º'"
    )
    await state.set_state(SystemPromptStates.waiting_for_prompt)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞")

@router.message(SystemPromptStates.waiting_for_prompt)
async def process_system_prompt(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    user_id = message.from_user.id
    system_prompt = message.text
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    openai_client.set_system_prompt(user_id, system_prompt)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞, —á—Ç–æ–±—ã –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è —Å—Ä–∞–∑—É
    openai_client.reset_conversation(user_id)
    
    await message.answer(
        "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Å–±—Ä–æ—à–µ–Ω–∞.\n\n"
        f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç: <i>{system_prompt}</i>"
    )
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    await state.clear()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –Ω–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç")

@router.message(Command("reset_system"))
async def reset_system_prompt_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /reset_system –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
    user_id = message.from_user.id
    openai_client.reset_system_prompt(user_id)
    openai_client.reset_conversation(user_id)
    
    await message.answer(
        "‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å–±—Ä–æ—à–µ–Ω –¥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é! –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —Ç–∞–∫–∂–µ —Å–±—Ä–æ—à–µ–Ω–∞."
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —Å–±—Ä–æ—Å–∏–ª —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç")

@router.message(F.text)
async def process_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    user_message = message.text
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
    await message.bot.send_chat_action(chat_id=user_id, action="typing")
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_message[:20]}...")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç OpenAI
    response, prompt_tokens, completion_tokens = await openai_client.get_completion(user_id, user_message)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö
    token_info = f"\n\nüìä –¢–æ–∫–µ–Ω—ã: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {prompt_tokens}, –ø–æ–ª—É—á–µ–Ω–æ {completion_tokens}, –≤—Å–µ–≥–æ {prompt_tokens + completion_tokens}"
    response_with_tokens = response + token_info
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã (–µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–µ–≤—ã—à–∞—é—Ç –ª–∏–º–∏—Ç Telegram –≤ 4096 —Å–∏–º–≤–æ–ª–æ–≤)
    if len(response_with_tokens) <= 4000:
        await message.answer(response_with_tokens)
    else:
        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–∞—Ö
        parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
        for i, part in enumerate(parts):
            if i > 0:
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —á–∞—Å—Ç–µ–π
                await asyncio.sleep(0.5)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–∞—Ö —Ç–æ–ª—å–∫–æ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏
            part_text = part
            if i == len(parts) - 1:
                part_text += token_info
                
            await message.answer(f"{part_text}\n\n[–ß–∞—Å—Ç—å {i+1}/{len(parts)}]")
    
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")